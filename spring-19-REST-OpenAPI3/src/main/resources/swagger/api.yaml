openapi: 3.0.1
info:
  title: Cydeo Application OpenApi
  description: Cydeo Application Open Api documentation
  version: v2
servers:
- url: http://localhost:8080
  description: local server
- url: https://dev.cydeo.com
  description: dev environment
tags:
- name: User
  description: User CRUD operations
- name: Account
  description: Account CRUD operations
paths:
  /api/v1/users/{id}:
    get:
      tags:
      - User
      summary: Read a User by id
      operationId: getUserById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
    put:
      tags:
      - User
      summary: Update a User
      operationId: updateUserById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
    delete:
      tags:
      - User
      summary: Delete a User by id
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/v1/users:
    post:
      tags:
      - User
      summary: Create a User
      operationId: createUser
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/UserDTO'
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/UserDTO'
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
  /api/v1/accounts:
    get:
      tags:
      - Account
      summary: Read An Account By Id
      operationId: getById
      parameters:
      - name: id
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccountDTO'
    post:
      tags:
      - Account
      summary: Create an Account
      operationId: createAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseWrapper'
    delete:
      tags:
      - Account
      summary: Delete an Account
      operationId: deleteById
      parameters:
      - name: id
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/v1/users/list:
    get:
      tags:
      - User
      summary: Read all Users
      operationId: getAllUsers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
  /api/v1/accounts/list:
    get:
      tags:
      - Account
      summary: Read All Accounts
      operationId: getAllAccounts
      responses:
        "200":
          description: successful response
          content:
            application/json: {}
        "404":
          description: Accounts not found
          content:
            application/json: {}
components:
  schemas:
    AccountDTO:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
        country:
          type: string
        state:
          type: string
        city:
          type: string
        age:
          type: integer
          format: int32
        postalCode:
          type: string
    UserDTO:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        username:
          type: string
        role:
          type: string
          enum:
          - ADMIN
          - USER
        account:
          $ref: '#/components/schemas/AccountDTO'
    ResponseWrapper:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
          enum:
          - 100 CONTINUE
          - 101 SWITCHING_PROTOCOLS
          - 102 PROCESSING
          - 103 CHECKPOINT
          - 200 OK
          - 201 CREATED
          - 202 ACCEPTED
          - 203 NON_AUTHORITATIVE_INFORMATION
          - 204 NO_CONTENT
          - 205 RESET_CONTENT
          - 206 PARTIAL_CONTENT
          - 207 MULTI_STATUS
          - 208 ALREADY_REPORTED
          - 226 IM_USED
          - 300 MULTIPLE_CHOICES
          - 301 MOVED_PERMANENTLY
          - 302 FOUND
          - 302 MOVED_TEMPORARILY
          - 303 SEE_OTHER
          - 304 NOT_MODIFIED
          - 305 USE_PROXY
          - 307 TEMPORARY_REDIRECT
          - 308 PERMANENT_REDIRECT
          - 400 BAD_REQUEST
          - 401 UNAUTHORIZED
          - 402 PAYMENT_REQUIRED
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 405 METHOD_NOT_ALLOWED
          - 406 NOT_ACCEPTABLE
          - 407 PROXY_AUTHENTICATION_REQUIRED
          - 408 REQUEST_TIMEOUT
          - 409 CONFLICT
          - 410 GONE
          - 411 LENGTH_REQUIRED
          - 412 PRECONDITION_FAILED
          - 413 PAYLOAD_TOO_LARGE
          - 413 REQUEST_ENTITY_TOO_LARGE
          - 414 URI_TOO_LONG
          - 414 REQUEST_URI_TOO_LONG
          - 415 UNSUPPORTED_MEDIA_TYPE
          - 416 REQUESTED_RANGE_NOT_SATISFIABLE
          - 417 EXPECTATION_FAILED
          - 418 I_AM_A_TEAPOT
          - 419 INSUFFICIENT_SPACE_ON_RESOURCE
          - 420 METHOD_FAILURE
          - 421 DESTINATION_LOCKED
          - 422 UNPROCESSABLE_ENTITY
          - 423 LOCKED
          - 424 FAILED_DEPENDENCY
          - 425 TOO_EARLY
          - 426 UPGRADE_REQUIRED
          - 428 PRECONDITION_REQUIRED
          - 429 TOO_MANY_REQUESTS
          - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
          - 451 UNAVAILABLE_FOR_LEGAL_REASONS
          - 500 INTERNAL_SERVER_ERROR
          - 501 NOT_IMPLEMENTED
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
          - 504 GATEWAY_TIMEOUT
          - 505 HTTP_VERSION_NOT_SUPPORTED
          - 506 VARIANT_ALSO_NEGOTIATES
          - 507 INSUFFICIENT_STORAGE
          - 508 LOOP_DETECTED
          - 509 BANDWIDTH_LIMIT_EXCEEDED
          - 510 NOT_EXTENDED
          - 511 NETWORK_AUTHENTICATION_REQUIRED
        statusCode:
          type: integer
          format: int32
        data:
          type: object
